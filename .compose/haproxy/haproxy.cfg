global
   user haproxy
   group haproxy
   # lua-load /usr/local/etc/haproxy/synapse_worker_endpoint_indexer.lua
   lua-load /usr/local/etc/haproxy/cors.lua
   log stdout format raw local0

defaults
    log global
    mode http
    option httplog clf
    option dontlognull
    retries 3
    option redispatch
    maxconn 2000

frontend http-in
   bind *:443 ssl crt /etc/ssl/certs/both.pem
   http-request lua.cors "GET,PUT,POST,DELETE" "*" "*"
   http-response lua.cors

   acl is_matrix hdr_end(host) -i matrix.docker.localhost
   acl is_synapse_matrix path_beg -i /_matrix
   acl is_synapse_synapse path_beg -i /_synapse
   acl is_well-known path_beg -i /.well-known/matrix
   # If asking a synapse endpoint
   #use_backend %[lua.path_to_worker] if is_matrix is_synapse_matrix || is_matrix is_synapse_synapse
   # If not a /_matrix/ call, redirect to main worker
   use_backend matrix if is_matrix

   acl is_tom hdr_end(host) -i tom.docker.localhost
   acl is_tom path_beg -i /_twake
   use_backend tom if is_tom
   # If it's asking for the well_known endpoint
   use_backend tom if is_matrix is_well-known

   acl is_chat hdr_end(host) -i chat.docker.localhost
   use_backend chat if is_chat

   acl is_portal hdr_end(host) -i docker.localhost
   acl is_portal hdr_end(host) -i auth.docker.localhost
   use_backend portal if is_portal

backend portal
   balance roundrobin
   option forwardfor
   http-request set-header X-Forwarded-Proto https
   server node1 auth:80 check
   server node2 auth:80 check
   server node3 auth:80 check

backend matrix
   balance roundrobin
   option forwardfor
   http-request set-header X-Forwarded-Proto https
   server synapse_main synapse:8008 check

backend tom
   balance roundrobin
   option forwardfor
   http-request set-header X-Forwarded-Proto https
   server node1 tom.server:3000 check

backend chat
   balance roundrobin
   option forwardfor
   http-request set-header X-Forwarded-Proto https
   server node1 chat:6868 check
